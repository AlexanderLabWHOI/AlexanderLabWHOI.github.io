<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alexander Lab @ WHOI on Alexander Lab @ WHOI</title>
    <link>https://alexanderlabwhoi.github.io/</link>
    <description>Recent content in Alexander Lab @ WHOI on Alexander Lab @ WHOI</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019</copyright>
    <lastBuildDate>Wed, 01 Mar 2023 00:00:00 -0500</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Reverse engineering environmental metatranscriptomes clarifies best practices for eukaryotic assembly</title>
      <link>https://alexanderlabwhoi.github.io/publication/krinos-2023/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 -0500</pubDate>
      
      <guid>https://alexanderlabwhoi.github.io/publication/krinos-2023/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Using anvi&#39;o in interactive mode</title>
      <link>https://alexanderlabwhoi.github.io/post/2022-10-24_anvio/</link>
      <pubDate>Mon, 24 Oct 2022 15:25:12 -0400</pubDate>
      
      <guid>https://alexanderlabwhoi.github.io/post/2022-10-24_anvio/</guid>
      <description>

&lt;p&gt;Anvi&amp;rsquo;o is a powerful tool for analyzing and vizualizing &amp;lsquo;omics data, much of which relies on one&amp;rsquo;s ability to visualize those data. On Poseidon, it can sometimes be difficult to work with these kinds of plotting tools, because we&amp;rsquo;re working on the command line. To use anvi&amp;rsquo;o interactively on Poseidon, we need to go through a few extra steps.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll walk you through the whole installation of anvi&amp;rsquo;o here from start to finish! Most of these instructions are also available on anvio.org. The other half of these instructions are mostly in the posts &lt;a href=&#34;https://alexanderlabwhoi.github.io/post/2019-03-08_jpn_slurm/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; (for Mac) and &lt;a href=&#34;https://alexanderlabwhoi.github.io/post/2019-07-24-slurm-win/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; (for Windows) that we&amp;rsquo;ve previously uploaded to the blog!&lt;/p&gt;

&lt;h3 id=&#34;step-one-create-a-fresh-conda-environment-for-anvi-o-and-install-dependencies&#34;&gt;Step One: create a fresh &lt;code&gt;conda&lt;/code&gt; environment for anvi&amp;rsquo;o and install dependencies&lt;/h3&gt;

&lt;p&gt;I like using &lt;code&gt;mamba&lt;/code&gt;. That will make the rest of your installs much faster. So I&amp;rsquo;ve modified anvi&amp;rsquo;o&amp;rsquo;s installation instructions a little bit to fit that principle. After logging into Poseidon&amp;rsquo;s login node (and making sure that you have the most recent and/or your preferred anaconda module loaded), we&amp;rsquo;ll run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;conda create -y --name anvio python=3.6 mamba
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ll wait for that to finish, then execute &lt;code&gt;conda activate anvio&lt;/code&gt; (or whatever you chose to name your environment! Next, we have a whole list of packages we&amp;rsquo;ll want mamba to go ahead and (efficiently) install for us in order for anvi&amp;rsquo;o to work. You should be able to just copy, paste, and execute this entire code block right in your terminal window.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mamba install -y -c bioconda &amp;quot;sqlite&amp;gt;=3.31.1&amp;quot;
mamba install -y -c bioconda prodigal
mamba install -y -c bioconda mcl
mamba install -y -c bioconda muscle=3.8.1551
mamba install -y -c bioconda hmmer
mamba install -y -c bioconda diamond
mamba install -y -c bioconda blast
mamba install -y -c bioconda megahit
mamba install -y -c bioconda spades
mamba install -y -c bioconda bowtie2 tbb=2019.8
mamba install -y -c bioconda bwa
mamba install -y -c bioconda samtools=1.9
mamba install -y -c bioconda centrifuge
mamba install -y -c bioconda trimal
mamba install -y -c bioconda iqtree
mamba install -y -c bioconda trnascan-se
mamba install -y -c bioconda r-base
mamba install -y -c bioconda r-stringi
mamba install -y -c bioconda r-tidyverse
mamba install -y -c bioconda r-magrittr
mamba install -y -c bioconda r-optparse
mamba install -y -c bioconda bioconductor-qvalue
mamba install -y -c bioconda fasttree
mamba install -y -c bioconda vmatch
mamba install -y -c bioconda fastani ## anvio says you don&#39;t need this one
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: anvi&amp;rsquo;o&amp;rsquo;s website says that you don&amp;rsquo;t need the &lt;code&gt;fastani&lt;/code&gt; package installed for the software to work. The install went fine for me. The whole install process might take quite a while, depending on the speed of the connection. If you elect to use &lt;code&gt;conda&lt;/code&gt; over &lt;code&gt;mamba&lt;/code&gt;, it will take a &lt;em&gt;lot&lt;/em&gt; longer.&lt;/p&gt;

&lt;h3 id=&#34;step-two-actually-install-anvi-o&#34;&gt;Step Two: actually install anvi&amp;rsquo;o&lt;/h3&gt;

&lt;p&gt;You should execute this in a folder where you don&amp;rsquo;t mind software files being downloaded to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -L https://github.com/merenlab/anvio/releases/download/v7.1/anvio-7.1.tar.gz \
        --output anvio-7.1.tar.gz
pip install anvio-7.1.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you should be good to go to run anvi&amp;rsquo;o!&lt;/p&gt;

&lt;h3 id=&#34;step-three-get-a-worker-node-spun-up-to-do-your-bidding&#34;&gt;Step Three: get a worker node spun up to do your bidding&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll run an interactive job on Poseidon using &lt;code&gt;srun&lt;/code&gt;. You can modify this command as needed if you want this job to go for longer than two hours&amp;hellip;or if people are hogging all the &lt;code&gt;compute&lt;/code&gt; nodes and you need to hedge your bets with a pre-empt-able &lt;code&gt;scavenger&lt;/code&gt; run, for example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;srun -p compute --time=02:00:00 --mem=50gb --pty bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Eventually, this should log you into a clean worker node, so your prompt should change from &lt;username&gt;@poseidon-l&lt;1 or 2&gt;.whoi.edu to &lt;username&gt;@pn&amp;lt;# of node you were assigned&amp;gt;. Now, you&amp;rsquo;re ready to not annoy the IT department by executing expensive programs on the common login node! Make sure now to &lt;code&gt;conda activate anvio&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;step-four-run-anvi-o-interactive-but-make-sure-to-specify-a-port&#34;&gt;Step Four: run anvi&amp;rsquo;o interactive, but make sure to specify a port&lt;/h3&gt;

&lt;p&gt;In order to run this, I am going to use the example the &lt;a href=&#34;https://merenlab.org/2016/02/27/the-anvio-interactive-interface/&#34; target=&#34;_blank&#34;&gt;Eren lab&lt;/a&gt; provides, since I don&amp;rsquo;t use anvi&amp;rsquo;o much. Note that their link is broken on their tutorial website. I found one that works &lt;a href=&#34;https://github.com/meren/anvio/blob/master/anvio/tests/sandbox/example-newick-tree.txt&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. I just saved the Newick text at that link to a file called &lt;code&gt;meren_tree.txt&lt;/code&gt;, then (inside my interactive session!), I executed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;anvi-interactive -t meren_tree.txt -p profile.db --title &#39;Simple tree test&#39; --server-only -P 5785
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-five-log-into-your-node-and-forward-that-port-to-your-browser&#34;&gt;Step Five: log into your node and forward that port to your browser&lt;/h3&gt;

&lt;p&gt;All of these steps are straight out of our tutorial on running a Jupyter notebook remotely that I linked above. If you use Windows, be sure to check out that post - I&amp;rsquo;m only using the Mac command here.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -t -t &amp;lt;username&amp;gt;@poseidon-l1.whoi.edu -L 5785:localhost:5785 ssh &amp;lt;the name of the &amp;quot;pn&amp;quot; node from above that showed up when you ran srun&amp;gt; -L 5785:localhost:5785
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To summarize, above you need to swap out:
- your own username
- the port number if you changed it
- the name of the worker node you ssh&amp;rsquo;d into&lt;/p&gt;

&lt;p&gt;For example, if my username is &amp;ldquo;akrinos&amp;rdquo;, I used port 5786, and I ssh&amp;rsquo;d into &amp;ldquo;pn075&amp;rdquo;, I would type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -t -t akrinos@poseidon-l1.whoi.edu -L 5786:localhost:5786 ssh pn075 -L 5786:localhost:5786
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to check out our more detailed post on ssh tunneling if you want shortcuts for doing this!&lt;/p&gt;

&lt;h3 id=&#34;step-six-access-your-interactive-session&#34;&gt;Step Six: access your interactive session&lt;/h3&gt;

&lt;p&gt;Simply type &lt;code&gt;localhost:5786&lt;/code&gt; into your web browser (replacing this second number with your present node), and you should be able to see your anvi&amp;rsquo;o interactive session! Feel free to use any &lt;code&gt;anvi-interactive&lt;/code&gt; command and accessory files that you want to after creating/uploading those files on Poseidon.&lt;/p&gt;

&lt;p&gt;Happy interacting!s&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bio-GO-SHIP: The Time Is Right to Establish Global Repeat Sections of Ocean Biology</title>
      <link>https://alexanderlabwhoi.github.io/publication/clayton-2022-bio/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 -0500</pubDate>
      
      <guid>https://alexanderlabwhoi.github.io/publication/clayton-2022-bio/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Marine microeukaryote metatranscriptomics: sample processing and bioinformatic workflow recommendations for ecological applications</title>
      <link>https://alexanderlabwhoi.github.io/publication/cohen-2022-marine/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 -0500</pubDate>
      
      <guid>https://alexanderlabwhoi.github.io/publication/cohen-2022-marine/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Microbiomes of bloom-forming Phaeocystis algae are stable and consistently recruited, with both symbiotic and opportunistic modes</title>
      <link>https://alexanderlabwhoi.github.io/publication/mars-2022-microbiomes/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 -0500</pubDate>
      
      <guid>https://alexanderlabwhoi.github.io/publication/mars-2022-microbiomes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Bio-GO-SHIP: Linking marine biodiversity and biogeochemistry</title>
      <link>https://alexanderlabwhoi.github.io/project/biogoship/</link>
      <pubDate>Fri, 02 Jul 2021 15:15:49 -0400</pubDate>
      
      <guid>https://alexanderlabwhoi.github.io/project/biogoship/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://biogoship.org/&#34; target=&#34;_blank&#34;&gt;Bio-GO-SHIP&lt;/a&gt; program aims to integrate the latest biological observing technologies into the Global Ocean Ship-based Hydrographic Investigation Program (GO-SHIP, &lt;a href=&#34;http://go-ship.org/&#34; target=&#34;_blank&#34;&gt;http://go-ship.org/&lt;/a&gt;). GO-SHIP runs a global repeat-section effort, wherein reference sections that transect major ocean regions are sampled every decade to observe global changes. Bio-GO-SHIP measurements will include optical, flow cytometric, metagenomic and metatranscriptomic, and particulate sampling. Compared to previous global ocean sequencing efforts, Bio-GO-SHIP will sample biological parameters at high spatial and vertical resolution, with ‘omic samples being taken approximately every degree, or approximately 26.5km on average between samples. My group is focused on the collection, sequencing, and preliminary assembly data product curation of the ‘omic dataset in conjunction with Adam Martiny’s lab&amp;ndash; with my lab taking the lead on the eukaryotic component.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Funding for this project provided by NOAA and the Simons Foundation&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EUKulele: Taxonomic annotation</title>
      <link>https://alexanderlabwhoi.github.io/project/eukulele/</link>
      <pubDate>Fri, 02 Jul 2021 15:15:49 -0400</pubDate>
      
      <guid>https://alexanderlabwhoi.github.io/project/eukulele/</guid>
      <description>&lt;p&gt;Easy, accurate classification of the taxonomy of microbial eukaryotes in the environment is a persistent challenge. For metagenomic and metatranscriptomic data, annotation is imperfect, because genomic references for organisms isolated from the environment are lacking. By leveraging experimental transcriptomic references, we have designed a tool to estimate the taxonomy of marine microbial eukaryotes. The tool is a flexible and modular way to leverage the expanding amount of omics data on environmentally-isolated microbial eukaryotes in order to better annotate multi-organism omics datasets (meta-omics). The freely-available tool is implemented as a Python package and installable via both &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;conda&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Project Repository&lt;/strong&gt;: &lt;a href=&#34;https://github.com/AlexanderLabWHOI/eukulele&#34; target=&#34;_blank&#34;&gt;https://github.com/AlexanderLabWHOI/eukulele&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ecological Role of Eukaryotic Pangenomes</title>
      <link>https://alexanderlabwhoi.github.io/project/ehuxleyi/</link>
      <pubDate>Fri, 02 Jul 2021 15:15:49 -0400</pubDate>
      
      <guid>https://alexanderlabwhoi.github.io/project/ehuxleyi/</guid>
      <description>&lt;p&gt;Coccolithophores, a group of calcifying marine phytoplankton within the phylum Haptophyta, play a significant role in marine biogeochemical cycles, particularly in those of carbon and sulfur. &lt;em&gt;Emiliania huxleyi&lt;/em&gt; is one of the most abundant extant coccolithophore species in the ocean, typified by its cosmopolitan distribution and ability to form large blooms. Intra-specific variability in physiology (e.g. enzymatic rates, morphology, growth rates) of &lt;em&gt;E. huxleyi&lt;/em&gt; has long been known in cultured isolates. The capacity for this variability was revealed through the genome sequencing of many &lt;em&gt;E. huxleyi&lt;/em&gt; strains, the results of which suggested that &lt;em&gt;E. huxleyi&lt;/em&gt; has a ‘pan genome,’ with gene content varying across strains. Intensive study of another ecologically significant taxa with a pan genome, the cyanobacteria &lt;em&gt;Prochlorococcus&lt;/em&gt;, has connected the variability of the pan genome to its niche separation and biogeographical distribution. Similar to &lt;em&gt;Prochlorococcus&lt;/em&gt;, intra-specific genomic variability may underpin the success of &lt;em&gt;E. huxleyi&lt;/em&gt; across diverse environmental conditions and underlie its observed physiological variability. Here we are combining a series of genomic, computational field surveys, and laboratory-based experiments designed to identify the function of the pan genome in &lt;em&gt;E. huxleyi&lt;/em&gt; ecology and biogeography. Through this project, we will address the questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Is there structure to the variable gene content across strains in the pan genome of &lt;em&gt;E. huxleyi&lt;/em&gt;?&lt;/li&gt;
&lt;li&gt;Does the environment select for particular strains of &lt;em&gt;E. huxleyi&lt;/em&gt; based on the content of the variable portion of the pan genome?&lt;/li&gt;
&lt;li&gt;Does the composition of the variable gene set determine strain success under shifting environmental conditions?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Funding for this project provided by the National Science Foundation&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EukHeist: Recovering Eukaryotic MAGs from Metagenomes</title>
      <link>https://alexanderlabwhoi.github.io/project/eukheist/</link>
      <pubDate>Fri, 02 Jul 2021 15:15:49 -0400</pubDate>
      
      <guid>https://alexanderlabwhoi.github.io/project/eukheist/</guid>
      <description>&lt;p&gt;Eukaryotic microbes, or protists, are key drivers of marine ecosystems, with roles ranging from primary producers (phytoplankton) to consumers (heterotrophs or mixotrophs). As with their bacteria and archaea, many protists are difficult or impossible to culture. This has limited our ability to directly interrogate their biology in the laboratory and has led us to underestimate their diversity across marine ecosystems. Molecular and genomic approaches, particularly those applied to whole, mixed communities (e.g. metagenomics, metatranscriptomics), have shed light on the ecological roles, evolutionary histories, and physiological capabilities of these organisms.&lt;/p&gt;

&lt;p&gt;EukHeist presents a scalable and reproducible bioinformatic pipeline to facilitate the retrieval of eukaryotic metagenome assembled genomes (MAGs) from mixed metagenomes, called EUKHeist (&lt;a href=&#34;https://github.com/AlexanderLabWHOI/EUKHeist&#34; target=&#34;_blank&#34;&gt;https://github.com/AlexanderLabWHOI/EUKHeist&lt;/a&gt;). EUKHeist streamlines and automates the discovery, recovery, quality assessment, and analysis of eukaryotic metagenome assembled genomes (MAGs) from mixed community metagenomes. EukHeist incorporates taxonoßßmic annotation through EUKulele (&lt;a href=&#34;https://github.com/AlexanderLabWHOI/EUKulele&#34; target=&#34;_blank&#34;&gt;https://github.com/AlexanderLabWHOI/EUKulele&lt;/a&gt;) as well as scalable structural and functional annotation of coding regions in eukaryotic MAGs with EukMetaSanity (&lt;a href=&#34;https://github.com/cjneely10/EukMetaSanity&#34; target=&#34;_blank&#34;&gt;https://github.com/cjneely10/EukMetaSanity&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Project repository:&lt;/strong&gt; &lt;a href=&#34;https://github.com/AlexanderLabWHOI/EUKHeist&#34; target=&#34;_blank&#34;&gt;https://github.com/AlexanderLabWHOI/EUKHeist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Funding for this project provided by the Simons Foundation and WHOI&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Phaeocystis</title>
      <link>https://alexanderlabwhoi.github.io/project/phaeocystis/</link>
      <pubDate>Fri, 02 Jul 2021 15:15:49 -0400</pubDate>
      
      <guid>https://alexanderlabwhoi.github.io/project/phaeocystis/</guid>
      <description>&lt;p&gt;Phytoplankton blooms are central to the ecology of Cape Cod Bay, where historically spring blooms of diatoms have been rapidly grazed, shuttling biomass through the food web. In more recent years, blooms of a haptophyte, &lt;em&gt;Phaeocystis pouchetii&lt;/em&gt; have become more frequent in Cape Cod Bay. These organisms produce large gelatinous colonies, which prevents blooms of this haptophyte from being effectively grazed, hence reducing carbon cycling in the upper water column. We are partnering with the Center for Coastal Studies in Provincetown to find and study these blooms.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Funding from the Simons Foundation&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SeqWell for Marine Microbes</title>
      <link>https://alexanderlabwhoi.github.io/project/seqwell/</link>
      <pubDate>Fri, 02 Jul 2021 15:15:49 -0400</pubDate>
      
      <guid>https://alexanderlabwhoi.github.io/project/seqwell/</guid>
      <description>&lt;p&gt;A central project aim is adaptation of a new single cell transcriptome (SCT) sequencing approach called &lt;a href=&#34;https://shaleklab.com/publication/seq-well-portable-low-cost-rna-sequencing-of-single-cells-at-high-throughput/&#34; target=&#34;_blank&#34;&gt;SeqWell&lt;/a&gt; for analysis of natural microbial communities. The method addresses two overarching obstacles to microbial symbiosis investigations: 1) the requirement that symbionts be brought into culture for ‘omics analyses, and 2) time resolution limits on bulk approaches because populations are asynchronous. With enough SCTs, pseudotime methods can establish the time course of host and symbiont interactions. SeqWell is a straightforward settling-chamber based system that can capture &amp;gt;10,000 SCTs in a single experiment. Compared to competing methods, it is also low-cost and readily adaptable for a broad range of protist shapes and sizes. We aim to address three major challenges inherent to scRNAseq of protist communities in the environment: 1) the morphological diversity (size/shapes) of protists across taxonomic groups; 2) cost; and 3) a need for bioinformatic pipelines that can analyze SCTs from natural microbial communities.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Funding for this project provided by the Moore Foundation&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thermal Acclimation in Emiliania huxleyi</title>
      <link>https://alexanderlabwhoi.github.io/project/thermal_ehux/</link>
      <pubDate>Fri, 02 Jul 2021 15:15:49 -0400</pubDate>
      
      <guid>https://alexanderlabwhoi.github.io/project/thermal_ehux/</guid>
      <description>&lt;p&gt;&lt;em&gt;Emiliania huxleyi&lt;/em&gt; is a globally-distributed coccolithophore with a major influence on beogeochemical cycling via the production of large, ephemeral blooms. Because of its global distribution, &lt;em&gt;Emiliania huxleyi&lt;/em&gt; has a wide thermal range and apparently a high capacity for short-term acclimation and long-term adaptation to thermal conditions. We are studying this capacity in the lab via both traditional experimental acclimation approaches in semi-continuous culture, and via tracking gene expression changes in response to thermal conditioning in the taxon via transcriptomics. Through this project, we will address the questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Is the growth rate or the response time to change more vulnerable to thermal conditioning?&lt;/li&gt;
&lt;li&gt;Does &lt;em&gt;Emiliania huxleyi&lt;/em&gt;&amp;rsquo;s capacity to survive in diverse thermal condition increase with exposure time?&lt;/li&gt;
&lt;li&gt;What can we learn from more transcriptomic data under precise thermal experimental conditions? Can we apply this to unpacking global &amp;lsquo;omics datasets?&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>eukrhythmic: automating metatranscriptomics</title>
      <link>https://alexanderlabwhoi.github.io/project/eukrhythmic/</link>
      <pubDate>Fri, 02 Jul 2021 15:15:49 -0400</pubDate>
      
      <guid>https://alexanderlabwhoi.github.io/project/eukrhythmic/</guid>
      <description>&lt;p&gt;Metatranscriptomics is a useful probe into the members of an ecological community, capturing community members and their potential functions in a single sequencing effort. Because transcribed RNA is sequenced, via thorough processing of metatrancriptomes, we can decipher both the members constituting a community as well as the genes that each member was expressing at the instant that the sample was collected. Metatranscriptomics is a relatively immature pursuit as compared to genomics or transcriptomics. However, even more palpable is the lack of thorough analysis and readily available tools for metatranscriptomes from the environment. More complicated still is the use of metatranscriptomes for eukaryotes from the environment, many of which have not been previously or thoroughly sequenced and have complex genetic features. Eukrhythmic is an approach to consolidating existing assembly effort for environmental eukaryotes. The pipeline includes assembly via multiple external assembly tools, and then a process of consolidating those assemblies based on sequential clustering steps. Also included with the pipeline is the option to perform downstream functional and taxonomic annotation of retrieved transcripts.&lt;/p&gt;

&lt;p&gt;The goal of this project is both to validate and provide support for the efforts of [marine] microbial ecologists that use metatranscriptomics to assess community structure and function, and to provide a tool that researchers can use to assemble their own environmental metatranscriptomes. Some questions associated with this project are:
1. Can we recover complex communities from shuffled metatranscriptomic sequencing reads?
2. Does the choice of assembler affect the quality of the assembly output?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Project Repository&lt;/strong&gt;: &lt;a href=&#34;https://github.com/AlexanderLabWHOI/eukrhythmic&#34; target=&#34;_blank&#34;&gt;https://github.com/AlexanderLabWHOI/eukrhythmic&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>`XQuartz` and remote integration for RStudio</title>
      <link>https://alexanderlabwhoi.github.io/post/2021-03-17-xquartz/</link>
      <pubDate>Wed, 09 Jun 2021 10:11:12 -0400</pubDate>
      
      <guid>https://alexanderlabwhoi.github.io/post/2021-03-17-xquartz/</guid>
      <description>&lt;p&gt;&lt;code&gt;RStudio&lt;/code&gt; was once my favorite and most often-used IDE. And there are still a lot of reasons to use it, even if you&amp;rsquo;ve gotten used to something like &lt;code&gt;Spyder&lt;/code&gt; or &lt;code&gt;Jupyter&lt;/code&gt;. &lt;code&gt;RStudio&lt;/code&gt; is a clean IDE that allows you to simultaneously view your filesystem, environment variables, &lt;code&gt;R&lt;/code&gt; scripts, and console, and is all very specifically tailored to &lt;code&gt;R&lt;/code&gt;, which is important in many cases (&lt;code&gt;R&lt;/code&gt; is an amazing but finicky language). There are many occasions when doing &amp;ldquo;big data&amp;rdquo;-esque work on an HPC in which you may need access to an IDE. The perhaps most frequent situations are visualizing/exploring data and debugging.&lt;/p&gt;

&lt;p&gt;For this tutorial, you&amp;rsquo;ll need a few things. The first thing is the most important, and it&amp;rsquo;s a little bit out of your hands. Your HPC system needs to be set up for X11 forwarding, which is a way to access the graphical window being spun up by the remote system (with access to all the files on that system) on your own computer. So we&amp;rsquo;re taking the visual output that the HPC can generate but doesn&amp;rsquo;t have the display to visualize, and sending it somewhere on our own computer. Namely, we&amp;rsquo;ll use &lt;code&gt;XQuartz&lt;/code&gt; to visualize this incoming data stream, which is the second prerequisite.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;X11&lt;/code&gt;-related software you&amp;rsquo;ll need on your computer differs based on whether you are a Mac or a PC. &lt;a href=&#34;https://kb.thayer.dartmouth.edu/article/336-x11-for-windows-and-mac&#34; target=&#34;_blank&#34;&gt;This website&lt;/a&gt; contains links to both. If you&amp;rsquo;re on Mac, you&amp;rsquo;ll need to download &lt;code&gt;XQuartz&lt;/code&gt;, and if you&amp;rsquo;re on PC, it&amp;rsquo;ll be &lt;code&gt;Xming&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The third prerequisite is that you need &lt;code&gt;RStudio&lt;/code&gt; installed somehow on your HPC system. My preferred method of doing this is via &lt;code&gt;conda&lt;/code&gt;. While we&amp;rsquo;re at it, we should also install some dependencies that will come up in your use of &lt;code&gt;R&lt;/code&gt;. Once you have &lt;code&gt;conda&lt;/code&gt; set up, you can use the following command to set up an &lt;code&gt;R&lt;/code&gt; environment that should work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;conda create -n myRenv -c r r-essentials r-base rstudio r-lattice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, now that we&amp;rsquo;re through the prerequisites, we can start setting up an &lt;code&gt;RStudio&lt;/code&gt; window on our remote HPC. First, try logging into your remote HPC with &lt;code&gt;XQuartz&lt;/code&gt; enabled, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -v -X &amp;lt;your username&amp;gt;@&amp;lt;your HPC address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re not used to using the &lt;code&gt;-v&lt;/code&gt; (verbose) flag when you log in, this will be an unwelcome spam to your screen. But the reason I suggest this is that you can sift through all of that noise to look for a line that looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;debug1: Requesting X11 forwarding with authentication spoofing.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So that you know your HPC system indeed is set up for &lt;code&gt;X11&lt;/code&gt; forwarding and isn&amp;rsquo;t just ignoring the flag you offered it.&lt;/p&gt;

&lt;p&gt;Next, we want to set up a compute or interactive node that we can use for long enough to get our work in &lt;code&gt;RStudio&lt;/code&gt; finished. This may differ system-to-system. If you&amp;rsquo;re using SLURM, you can use a command like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;srun --time=&amp;lt;some time limit&amp;gt; -p &amp;lt;queue to use&amp;gt; --mem=&amp;lt;some memory requirement&amp;gt; --pty bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you&amp;rsquo;re allocated resources, you should see a prompt that displays the new node you&amp;rsquo;ve been redirected to. Next, you&amp;rsquo;ll type &lt;code&gt;exit&lt;/code&gt; into the window to leave this node and return to your original node (most likely the login node). This is because we need to log into this new node that we reserved with that &lt;code&gt;-X&lt;/code&gt; flag, in order for it to recognize our request to use &lt;code&gt;X11&lt;/code&gt; forwarding. So, remembering the node that you were dispatched to, type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -X &amp;lt;your user&amp;gt;@&amp;lt;your new node&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Depending on your present location, you might not need the username). Now, we can activate that &lt;code&gt;conda&lt;/code&gt; environment that we prepared before getting started.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;conda activate myRenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which should make &lt;code&gt;RStudio&lt;/code&gt; available to you. Now, we&amp;rsquo;re ready to launch &lt;code&gt;RStudio&lt;/code&gt;! Your &lt;code&gt;XQuartz&lt;/code&gt; or &lt;code&gt;Xming&lt;/code&gt; window should pop up for you automatically when you type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rstudio --x11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may also see this output in your terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;debug1: client_input_channel_open: ctype x11 rchan 3 win 65536 max 16384
debug1: client_request_x11: request from 127.0.0.1 46360
debug1: x11_connect_display: $DISPLAY is launchd
debug1: channel 1: new [x11]
debug1: confirm x11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is good. In your &lt;code&gt;XQuartz&lt;/code&gt; application, you would see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;resources/rstudio_api.png&#34; alt=&#34;RStudio Window in XQuartz&#34; title=&#34;What your snazzy new RStudio window should now look like.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Note that if the window doesn&amp;rsquo;t pop up, you can just select the &lt;code&gt;X&lt;/code&gt; [marks the spot] in the taskbar to find your instance of &lt;code&gt;XQuartz&lt;/code&gt; or similar, where your &lt;code&gt;RStudio&lt;/code&gt; window should be patiently waiting, assuming you didn&amp;rsquo;t get any errors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;resources/xquartz_symbol.png&#34; alt=&#34;XQuartz in Taskbar&#34; title=&#34;Where your window will be if you have a Mac.&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The osmolyte ties that bind: genomic insights into synthesis and breakdown of organic osmolytes in marine microbes</title>
      <link>https://alexanderlabwhoi.github.io/publication/mc-parland-20210/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://alexanderlabwhoi.github.io/publication/mc-parland-20210/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
